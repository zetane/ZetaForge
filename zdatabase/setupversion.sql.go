// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: setupversion.sql

package zdatabase

import (
	"context"
)

const createSetupVersion = `-- name: CreateSetupVersion :one
INSERT INTO SetupVersion(
	created, version
) VALUES (
	unixepoch('now'), ?
)
RETURNING id, created, version
`

func (q *Queries) CreateSetupVersion(ctx context.Context, version string) (SetupVersion, error) {
	row := q.db.QueryRowContext(ctx, createSetupVersion, version)
	var i SetupVersion
	err := row.Scan(&i.ID, &i.Created, &i.Version)
	return i, err
}

const listSetupVersions = `-- name: ListSetupVersions :many
SELECT id, created, version FROM SetupVersion
ORDER BY created DESC
`

func (q *Queries) ListSetupVersions(ctx context.Context) ([]SetupVersion, error) {
	rows, err := q.db.QueryContext(ctx, listSetupVersions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SetupVersion
	for rows.Next() {
		var i SetupVersion
		if err := rows.Scan(&i.ID, &i.Created, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
