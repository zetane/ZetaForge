{
  "index": 0,
  "history": [
    {
      "timestamp": 1734625989338,
      "prompt": "Code Template",
      "response": "import json\r\nimport uuid\r\n\r\ndef compute(data_view):\r\n    \"\"\"Generates an HTML file with a unique name and returns the file name.\r\n\r\n    Inputs:\r\n        data_view (str, dict, or list): A string, dictionary, or list of dictionaries to display in the gallery.\r\n\r\n    Outputs:\r\n        dict: A dictionary with the key 'html' and the value being the name of the generated HTML file.\r\n    \"\"\"\r\n\r\n    html_template = \"\"\"\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <title>Data Gallery</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js\"></script>\r\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n    <style>\r\n        body {\r\n            margin: 30px;\r\n            font-size: 16px;\r\n            font-family: 'Roboto';\r\n        }\r\n\r\n        .data-item {\r\n            margin: 10px;\r\n            padding: 10px;\r\n            border: 1px solid #ccc;\r\n            border-radius: 5px;\r\n            background-color: #f8f8f8;\r\n            white-space: pre-wrap; /* Maintains whitespace formatting */\r\n            overflow-wrap: break-word; /* Ensures long text breaks and wraps to next line */\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div id=\"data_gallery\" class=\"gallery\"></div>\r\n    <script>\r\n        $(document).ready(function(){\r\n            const data = $data_paths;\r\n\r\n            console.log('Data', data)\r\n\r\n            var galleryElement = $('#data_gallery');\r\n            galleryElement.empty();\r\n\r\n            data.map(function (item) {\r\n                var $newDataItem = $('<div class=\"data-item\"></div>');\r\n                $newDataItem.text(JSON.stringify(item, null, 4)); // Use a 4-space indent for pretty-printing\r\n                galleryElement.append($newDataItem);\r\n            })\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n    \"\"\"\r\n    # Ensure data_view is always a list\r\n    if isinstance(data_view, (str, dict)):\r\n        data_view = [data_view]\r\n\r\n    unique_id = str(uuid.uuid4())\r\n    html_path = f\"/files/data_viz_{unique_id}.html\"\r\n    data_view_str = json.dumps(data_view, indent=4)  # Pretty-print JSON data in the HTML file generation\r\n    html_code = html_template.replace(\"$data_paths\", data_view_str)\r\n\r\n    # Write the file\r\n    with open(html_path, \"w\") as file:\r\n        file.write(html_code)\r\n\r\n    return {\"html\": f\"data_viz_{unique_id}.html\"}\r\n\r\ndef test():\r\n    \"\"\"Test the compute function with various data types and print the test cases and their results.\"\"\"\r\n    test_cases = [\r\n        \"Single string\",\r\n        [\"List\", \"of\", \"strings\"],\r\n        {\"name\": \"Alice\", \"age\": 30},\r\n        [{\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 35}],\r\n        json.dumps({\"name\": \"Dave\", \"age\": 40}),\r\n        [json.dumps({\"name\": \"Eve\", \"age\": 45}), json.dumps({\"name\": \"Frank\", \"age\": 50})]\r\n    ]\r\n\r\n    for i, case in enumerate(test_cases):\r\n        result = compute(case)\r\n        print(f\"Test case {i+1}: Input - {case}\")\r\n        print(f\"Result: {result}\\n\")\r\n\r\n"
    }
  ]
}